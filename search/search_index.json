{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Motivation: I want to stay in the terminal so Postman is not an option. <code>curl</code> is quick and fast, but no way to save and customize requests. Here comes <code>yurl</code> .</p> <p>Yurl allows you to define your http requests in <code>yaml</code> format and run them directly from command line.</p> http.yaml<pre><code>config:\nhost: jsonplaceholder.typicode.com\nport: 443\nscheme: https\nrequests:\nGetTodo:\npath: /todos/{{ id }}\nmethod: GET\n</code></pre> bash<pre><code>yurl GetTodo\n</code></pre> <p></p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#basic","title":"Basic","text":"<p>By default <code>yurl</code> loads in a file named <code>http.yaml</code>.</p> http.yaml<pre><code>config:\nhost: jsonplaceholder.typicode.com\nport: 443\nscheme: https\nrequests:\nGetTodo:\npath: /todos/{{ id }}\nmethod: GET\n</code></pre> bash<pre><code>yurl GetTodo\n</code></pre> <p></p>"},{"location":"examples/#verbose-output","title":"Verbose output","text":"bash<pre><code>yurl -v GetTodo\n</code></pre>"},{"location":"examples/#post-request-with-json-body","title":"Post request with json body","text":"http.yaml<pre><code>config:\nhost: jsonplaceholder.typicode.com\nport: 443\nscheme: https\nrequests:\nCreateTodo:\npath: /todos\nmethod: POST\njsonBody: |\n{\n\"title\": \"{{ title }}\"\n}\n</code></pre> bash<pre><code>yurl CreateTodo\n</code></pre>"},{"location":"examples/#specify-a-request-file","title":"Specify a request file","text":"<p>Use the <code>-f</code> or <code>--file</code> to specify a requests file.</p> requests.yaml<pre><code>config:\nhost: jsonplaceholder.typicode.com\nport: 443\nscheme: https\nrequests:\nCreateTodo:\npath: /todos\nmethod: POST\njsonBody: |\n{\n\"title\": \"{{ title }}\"\n}\n</code></pre> bash<pre><code>yurl -f requests.yaml CreateTodo\n</code></pre>"},{"location":"examples/#passing-variables","title":"Passing variables","text":"<p>Use the <code>-var</code> or <code>--variable</code> to specify a variable.</p> requests.yaml<pre><code>config:\nhost: jsonplaceholder.typicode.com\nport: 443\nscheme: https\nrequests:\nCreateTodo:\npath: /todos\nmethod: POST\njsonBody: |\n{\n\"title\": \"{{ title }}\",\n\"userId\": {{ userId }}\n}\n</code></pre> bash<pre><code>yurl -f requests.yaml -var title=Title CreateTodo\n</code></pre> <p>Provide as many variables as you want.</p> bash<pre><code>yurl -f requests.yaml -var title=Title -var userId=1 CreateTodo\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>Install using any one of the following methods.</p>"},{"location":"installation/#go-install","title":"Go Install","text":"<pre><code>go install github.com/gurleensethi/yurl@latest\n</code></pre>"},{"location":"installation/#brew","title":"Brew","text":"<p>Coming Soon</p>"},{"location":"installation/#docker","title":"Docker","text":"<p>Coming Soon</p>"},{"location":"quick-start/","title":"Quick Start","text":"<p>This document will walk you through the process of using yurl and explore its various features.</p> <p>We will use the JSONPlaceholder API as an example, which is publically available, so you can follow along with the examples on your own.</p>"},{"location":"quick-start/#basic","title":"Basic","text":"<p>Let's start with the most basic example.</p> <p>Create a <code>http.yaml</code> file with the following content:</p> http.yaml<pre><code>config:\nhost: jsonplaceholder.typicode.com\nport: 443\nscheme: https\nrequests:\nListTodos:\nmethod: GET\npath: /todos\n</code></pre> <p>We define a single request named <code>ListTodos</code> which will list all the todos from the JSONPlaceholder API.</p> <p>Now, let's run the following command:</p> <pre><code>yurl ListTodos\n</code></pre> <p><code>yurl</code> by default detects the <code>http.yaml</code> file and executes the <code>ListTodos</code> request.</p> <p></p>"},{"location":"quick-start/#request-with-user-input","title":"Request with user input","text":"<p>Now we define a request to fetch a single todo by its id. We will define the <code>id</code> parameter as a variable.</p> http.yaml<pre><code>config:\nhost: jsonplaceholder.typicode.com\nport: 443\nscheme: https\nrequests:\nListTodos:\nmethod: GET\npath: /todos\nGetTodo:\nmethod: GET\npath: /todos/{{ id }}\n</code></pre> <p>We define a single request named <code>GetTodo</code> which will fetch a single todo by its id. We use variables to get the <code>id</code> from the user.</p> <p></p> <p>Learn more about variables here.</p>"},{"location":"quick-start/#verbose-mode","title":"Verbose Mode","text":"<p>You can run the requests in verbose mode by passing the <code>-v</code> flag.</p> <pre><code>yurl -v GetTodo\n</code></pre> <p></p>"},{"location":"quick-start/#list-requests","title":"List Requests","text":"<p>We can list all the requests defined in the <code>http.yaml</code> file by running <code>yurl ls</code> command.</p> <pre><code>yurl ls\n</code></pre> <p></p>"},{"location":"quick-start/#post-request-with-json-body","title":"Post Request with JSON Body","text":"<p>Let's define a request to create a new todo. We will use the <code>POST</code> method and pass a JSON body as the payload.</p> http.yaml<pre><code>config:\nhost: jsonplaceholder.typicode.com\nport: 443\nscheme: https\nrequests:\nListTodos:\nmethod: GET\npath: /todos\nGetTodo:\nmethod: GET\npath: /todos/{{ id }}\nCreateTodo:\nmethod: POST\npath: /todos/\njsonBody: |\n{\n\"title\": \"{{ title }}\"\n}\n</code></pre> <p></p> <p><code>jsonBody</code> automatically sets the <code>Content-Type</code> header to <code>application/json</code>.</p>"},{"location":"quick-start/#enforcing-types-on-user-input-variables","title":"Enforcing types on user input variables","text":"<p>We can enforce types on user input variables by specifying the type following the format <code>&lt;varname:type&gt;</code>.</p> http.yaml<pre><code>config:\nhost: jsonplaceholder.typicode.com\nport: 443\nscheme: https\nrequests:\nListTodos:\nmethod: GET\npath: /todos\nGetTodo:\nmethod: GET\npath: /todos/{{ id }}\nCreateTodo:\nmethod: POST\npath: /todos/\njsonBody: |\n{\n\"title\": \"{{ title }}\",\n\"userId\": \"{{ userId:int }}\n}\n</code></pre> <p>Type of variable is displayed in the prompt.</p> <p></p> <p>If the user enters a value of a different type, the request will fail.</p> <p></p>"},{"location":"request/","title":"Request","text":""},{"location":"variables/","title":"Variables","text":""},{"location":"variables/#using-variables","title":"Using Variables","text":"<p>To use variables use double curly brackets <code>{{ }}</code>.</p> http.yaml<pre><code>requests:\nGetTodo:\npath: /todos/{{ id }} # (1)!\nmethod: GET\n</code></pre> <ol> <li><code>{{ id }}</code> will be replaced with whatever is contained in the variable <code>id</code>.</li> </ol>"},{"location":"variables/#user-input","title":"User Input","text":"<p>Variables are sourced from a variable set. If a variable doesn't exist in the variable set, user is explicitly prompted to enter the value for that variable.</p> http.yaml<pre><code>requests:\nGetTodo:\npath: /todos/{{ id }}\nmethod: GET\n</code></pre> <p>In case the variable <code>id</code> doesn't exist in the variable set, user gets a prompt to enter the value.</p> <pre><code>$ yurl GetTodo\nEnter `id`:\n</code></pre> <p>Variables can be used in <code>path</code>, <code>headers</code>, <code>body</code>.</p> http.yaml<pre><code>requests:\nUpdateTodo:\npath: /todos/{{ id }} # (1)!\nmethod: PUT\nheaders:\nAuthorization: Bearer {{ accessToken }} # (2)!\njson: | # (3)!\n{\n\"title\": \"{{ title }}\" \n}\n</code></pre> <ol> <li>Using variables in path.</li> <li>Using variable in headers.</li> <li>Using variables in body.</li> </ol> <p>This is perfect for the cases when each time you execute a request you want to provide values at runtime.</p> Once the value of variable has been sourced from a user, it is added to the variable set. <p>In the below example,</p> http.yaml<pre><code>requests:\nGetTodo:\npath: /todos/{{ id }}\nmethod: PATCH\njsonBody: |\n{\n\"id\": {{ id }}\n}\n</code></pre> <p>User will only be prompted for <code>id</code> once when <code>yurl</code> encounters the path <code>/todos/{{ id }}</code>, once the value is entered it is saved in the variable set and reused in body.</p>"},{"location":"variables/#command-line-variables","title":"Command Line Variables","text":"<p>You can pass value for variables directly from command line using <code>-var</code> or <code>--variable</code> flag.</p> http.yaml<pre><code>requests:\nUpdateTodo:\npath: /todos/{{ id }}\nmethod: PUT\njsonBody: |\n{\n\"title\": \"{{ title }}\"\n}\n</code></pre> <pre><code>$ yurl -var id=10 UpdateTodo\n</code></pre> <p>You can pass as many variables as you want.</p> <pre><code>$ yurl -var id=10 -var title=\"Hello World\" UpdateTodo\n</code></pre> <p>All the variables are added to the variable set.</p>"},{"location":"variables/#variables-from-a-file","title":"Variables from a file","text":"<p>You can define variables in a file and pass all of them at once using <code>-var-file</code> or <code>--variable-file</code>.</p> <p>Variables in the file need to follow the pattern: <code>key=value</code>.</p> local.vars<pre><code>email=test@test.com\npassword=password\n</code></pre> http.yaml<pre><code>requests:\nLogin:\nmethod: POST\npath: /auth/login\njsonBody: |\n{\n\"email\": \"{{ email }}\",\n\"password\": \"{{ password }}\"\n}\n</code></pre> <pre><code>$ yurl -var-file local.vars Login\n</code></pre> <p>You can provide as many variable files as you want.</p> <pre><code>$ yurl -var-file local.vars -var-file staging.vars Login\n</code></pre> <p>All the variables are added to the variable set.</p>"},{"location":"variables/#variable-types","title":"Variable Types","text":"<p>You can define types on variables when the value is prompted from the user.</p> <p>Use the pattern: <code>{{ &lt;var name&gt;:&lt;type&gt; }}</code> to enforce a type.</p> http.requests<pre><code>requests:\nGetTodoById:\nmethod: GET\npath: /todos/{{ id:int }} # (1)!\nheaders:\nAccept: application/json\n</code></pre> <ol> <li>Types are defined using <code>&lt;var name&gt;:&lt;type&gt;</code> pattern.</li> </ol> <pre><code>$ yurl GetTodoById\nEnter `id` (int): 10\n</code></pre> <p>In the above example, type <code>int</code> is defined for the variable <code>id</code>. When user is prompted for the value of <code>id</code> the required type is also displayed.</p> <p>If the entered value is not valid, <code>yurl</code> exists immediately.</p> <pre><code>$ yurl GetTodoById\nEnter `id` (int): not int\n\ninput for `id` must be of type int\n</code></pre>"},{"location":"variables/#supported-types","title":"Supported Types","text":"<p>Currently the following types are supported:</p> <ul> <li><code>string</code></li> <li><code>int</code></li> <li><code>float</code></li> <li><code>bool</code></li> </ul>"}]}